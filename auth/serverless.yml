service: auth

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  stackName: art-center-auth-${self:provider.stage}
  environment:
    AUTH0_MANAGEMENT_CLIENT_ID_PARAM_NAME: ${self:custom.auth0.managementClient.id.paramName}
    AUTH0_MANAGEMENT_CLIENT_SECRET_PARAM_NAME: ${self:custom.auth0.managementClient.secret.paramName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        - ${self:custom.auth0.managementClient.id.paramArn}
        - ${self:custom.auth0.managementClient.secret.paramArn}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  auth0:
    managementClient:
      id:
        paramName: "auth0-management-client-id"
        paramArn: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.auth0.managementClient.id.paramName}"
      secret:
        paramName: "auth0-management-client-secret"
        paramArn: "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.auth0.managementClient.secret.paramName}"
  spaClient:
    name: "${self:provider.stackName}-spa-client"

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

functions:
  spaClientHandler:
    handler: src/service-tokens/spa-client/SpaClientHandler.handle

resources:
  Resources:
    SpaClient:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [SpaClientHandlerLambdaFunction, Arn]
        SpaClientName: ${self:custom.spaClient.name}
        Stage: ${self:provider.stage}
        Callbacks:
          - "http://localhost:3000"
        AllowedLogoutUrls:
          - "http://localhost:3000"
        WebOrigins:
          - "http://localhost:3000"
        AllowedOrigins:
          - "http://localhost:3000"
