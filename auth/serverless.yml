service: auth

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  stackName: ${self:custom.authServiceIdentifier}
  environment:
    AUTH0_MANAGEMENT_CLIENT_ID_PARAM_NAME: ${self:custom.auth0.managementClient.id.paramName}
    AUTH0_MANAGEMENT_CLIENT_SECRET_PARAM_NAME: ${self:custom.auth0.managementClient.secret.paramName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource:
        - ${self:custom.auth0.managementClient.id.paramArn}
        - ${self:custom.auth0.managementClient.secret.paramArn}

custom:
  authServiceIdentifier: art-center-auth-${self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  auth0:
    managementClient:
      id:
        paramName: auth0-management-client-id
        paramArn: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.auth0.managementClient.id.paramName}
      secret:
        paramName: auth0-management-client-secret
        paramArn: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${self:custom.auth0.managementClient.secret.paramName}
  spaClient:
    name: ${self:custom.authServiceIdentifier}-spa-client
  databaseConnection:
    name: ${self:custom.authServiceIdentifier}-db-connection
  resourceServer:
    name: ${self:custom.authServiceIdentifier}-resource-server
    identifier: https://${self:custom.authServiceIdentifier}.groffcole.com/
    scopes:
      adminUser: admin.user.${self:custom.authServiceIdentifier}
      regularUser: regular.user.${self:custom.authServiceIdentifier}
  machToMachClient:
    name: ${self:custom.authServiceIdentifier}-mach-2-mach-client
  userRole:
    admin:
      name: ${self:custom.authServiceIdentifier}-admin-user-role
      emailAddress: groffcole+${self:custom.authServiceIdentifier}-admin@gmail.com
    regular:
      name: ${self:custom.authServiceIdentifier}-regular-user-role

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

functions:
  spaClientHandler:
    handler: src/service-tokens/spa-client/SpaClientHandler.handle
  databaseConnectionHandler:
    handler: src/service-tokens/database-connection/DatabaseConnectionHandler.handle
  resourceServerHandler:
    handler: src/service-tokens/resource-server/ResourceServerHandler.handle
  machToMachClientHandler:
    handler: src/service-tokens/mach-to-mach-client/MachToMachClientHandler.handle
  clientGrantHandler:
    handler: src/service-tokens/client-grant/ClientGrantHandler.handle
  userRoleHandler:
    handler: src/service-tokens/user-role/UserRoleHandler.handle

resources:
  Resources:
    SpaClient:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [SpaClientHandlerLambdaFunction, Arn]
        SpaClientName: ${self:custom.spaClient.name}
        Stage: ${self:provider.stage}
        Callbacks:
          - http://localhost:3000
        AllowedLogoutUrls:
          - http://localhost:3000
        WebOrigins:
          - http://localhost:3000
        AllowedOrigins:
          - http://localhost:3000

    DatabaseConnection:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [DatabaseConnectionHandlerLambdaFunction, Arn]
        DatabaseConnectionName: ${self:custom.databaseConnection.name}
        Stage: ${self:provider.stage}
        SpaClientId:
          Ref: SpaClient

    ResourceServer:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [ResourceServerHandlerLambdaFunction, Arn]
        ResourceServerName: ${self:custom.resourceServer.name}
        Stage: ${self:provider.stage}
        Identifier: ${self:custom.resourceServer.identifier}
        Scopes:
          - value: ${self:custom.resourceServer.scopes.adminUser}
            description: ${self:custom.resourceServer.scopes.adminUser}
          - value: ${self:custom.resourceServer.scopes.regularUser}
            description: ${self:custom.resourceServer.scopes.regularUser}

    MachToMachClient:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [MachToMachClientHandlerLambdaFunction, Arn]
        MachToMachClientName: ${self:custom.machToMachClient.name}
        Stage: ${self:provider.stage}
        ResourceServerId:
          Ref: ResourceServer

    ClientGrant:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [ClientGrantHandlerLambdaFunction, Arn]
        Stage: ${self:provider.stage}
        ClientId:
          Ref: MachToMachClient
        Audience:
          Fn::GetAtt: [ResourceServer, Identifier]

    AdminUserRole:
      Type: AWS::CloudFormation::CustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [UserRoleHandlerLambdaFunction, Arn]
        UserRoleName: ${self:custom.adminUserRoleName}
        Stage: ${self:provider.stage}
        Permissions:
          - permission_name: ${self:custom.resourceServer.scopes.adminUser}
            resource_server_identifier:
              Fn::GetAtt: [ResourceServer, Identifier]
