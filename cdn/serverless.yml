service: cdn

provider:
  name: aws
  stage: ${opt:stage}
  stackName: ${self:custom.cdnServiceIdentifier}

custom:
  cdnServiceIdentifier: art-center-cdn-${self:provider.stage}
  hosting:
    bucketName: ${self:custom.cdnServiceIdentifier}-hosting-bucket
  cdn:
    idParamName: ${self:custom.cdnServiceIdentifier}-cdn-id-param-name
    originId: ${self:custom.cdnServiceIdentifier}-cdn-origin-id
    originAccessIdentity: ${self:custom.cdnServiceIdentifier}-cdn-oai
  domain:
    name: ${self:custom.domain.options.${self:provider.stage}, self:custom.domain.options.other}
    hostedZone: groffcole.com.
    options:
      other: ${self:provider.stage}.art.dev.groffcole.com
      dev: art.dev.groffcole.com
      prod: art.groffcole.com

resources:
  Resources:
    HostingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.hosting.bucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          IgnorePublicAcls: true
          BlockPublicPolicy: true
          RestrictPublicBuckets: true

    OriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: ${self:custom.cdn.originAccessIdentity}

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domain.name}
          CustomErrorResponses:
            - ErrorCachingMinTTL: 300
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          Origins:
            - Id: ${self:custom.cdn.originId}
              DomainName:
                Fn::GetAtt: [HostingBucket, DomainName]
              S3OriginConfig:
                OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", Ref: OriginAccessIdentity]]
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 86400
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            MinTTL: 0
            MaxTTL: 31536000
            SmoothStreaming: false
            TargetOriginId: ${self:custom.cdn.originId}
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          IPV6Enabled: true
          PriceClass: PriceClass_All
          ViewerCertificate:
            AcmCertificateArn: ${ssm:art.groffcole.com-certificate-arn~true}
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
            
    CloudFrontDistributionIdParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: ${self:custom.cdn.idParamName}
        Type: String
        Value:
          Ref: CloudFrontDistribution

    HostingBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.hosting.bucketName}
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
              Action:
                - s3:GetObject
              Resource: !Join ["", ["arn:aws:s3:::", "${self:custom.hosting.bucketName}", "/*"]]

    RecordSetA:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt: [CloudFrontDistribution, DomainName]
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: ${self:custom.domain.hostedZone}
        Name: ${self:custom.domain.name}
        Type: A

    RecordSetAAAA:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt: [CloudFrontDistribution, DomainName]
          EvaluateTargetHealth: false
          HostedZoneId: Z2FDTNDATAQYW2
        HostedZoneName: ${self:custom.domain.hostedZone}
        Name: ${self:custom.domain.name}
        Type: AAAA